# 设计原则 -- Python描述


### 软件发展历史

##### 机器语言
大家都知道, 最早软件开发使用的是 机器语言, 也就是直接使用 二进制来编程.

可能是这样:

    101100000000000000000011
    000001010000000000110000
    001011010000000000000101

机器语言 特点就是 基本就是硬件指令, 对机器友好, 对程序员可太不友好,

**太难读**, **太难写**, **太难改**.

##### 汇编语言
后来就有了 汇编语言,

可能是这样:

    .section .data
    a: .int 10
    b: .int 20
    format: .asciz "%d\n"
    .section .text
    .global _start
    _start:
    movl a, %edx　　
    addl b, %edx　　
    pushl %edx
    pushl $format
    call printf
    movl $0, (%esp)
    call exit
汇编语言虽然解决了机器语言读写复杂的问题，但本质上还是面向机器的，
对于程序员来说同样很复杂.

所以 后来就有了高级语言.

##### 高级语言
高级语言 是面向自然语言的, 屏蔽了面向机器的复杂性, <br>
让程序员不需要再关注机器底层的低级结构和逻辑, 解放了程序员的生产力. <br>
我们现在熟知的 c, c++, c#, java, python, php, go 等都是高级语言.

但是, 随着 计算机的普及, 软件规模越来越大, 软件复杂度也大大增加. <br>
造成的 后果 就是 软件质量底下, 项目无法如期完成, 项目严重超支, 甚至会造成严重事故.

比如 1963年 美国的水手一号火箭发射失败事故，就是因为一行 FORTRAN 代码错误导致的。

##### 结构化编程
为了解决 软件复杂度, 出现了 **结构化程序设计方法**, <br>
结构化 本质上 是一种面向过程的设计思想, 但通过"自顶向下, 逐步细化, 模块化" 的方法,
将软件复杂度控制在一定范围内, 从而在整体上降低软件开发的复杂度.

##### 面向对象编程
结构化编程缓解了软件开发的**逻辑复杂性**.<br>
然而随着硬件快速发展, 业务需求越来约复杂, 以及编程应用领域越来越广泛, <br>
导致 软件生产力 又一次跟不上 硬件和业务的发展.<br>
而这一次的 原因在于 软件 **扩展复杂性**.<br>
于是 又有了 面向对象编程.<br>
面向对象的本质是 一切事物皆对象.
将现实世界事物抽象为对象,帮助人们实现对现实世界的抽象与数字建模.
面向对象是当下最流行的编程思想.

面向对象为啥能缓解 "扩展复杂性"?






结构化 解决的是 逻辑复杂度, 面向对象解决的是业务复杂度.

软件革命里程碑, 都是为了解决复杂性.不同阶段有不同的复杂性.


### 设计原则
很多人都知道 面向对象有23中设计模式,
但是 我个人觉得, 设计模式

##### 单一职责原则
一个类的方法太多, 那它本身就是一个结构化的不易扩展的.
最低的要求是 方法级的单一职责.

扩展难的原因:
扩展一个功能 涉及到两种扩展
一种是 修改已有. 一种是新增.
比如修改一个接口: 复杂的地方是什么?
1. 前后端联调, 恶心,但不复杂.
2. 依赖修改.
新增一个接口: 复杂的地方是什么
1.



##### 里氏替换原则


##### 依赖倒置原则

##### 接口隔离原则

##### 迪米特法则

##### 开闭原则
对扩展开放, 对修改关闭.

##### 合成聚合


高内聚低耦合
有一个简单粗暴的方法
一个类 不超过 200行
一个方法不超过50行
